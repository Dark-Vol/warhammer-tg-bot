#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Warhammer Army Builder Bot
"""

from main import Unit, Army, UNITS_DATABASE

def test_unit_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —é–Ω–∏—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —é–Ω–∏—Ç–∞...")
    captain = Unit("Captain", 80, "HQ", "Space Marines", special_rules=["Aura of Command"])
    assert captain.name == "Captain"
    assert captain.points == 80
    assert captain.category == "HQ"
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —é–Ω–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_army_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–º–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–º–∏–∏...")
    army = Army("Space Marines", 2000)
    assert army.faction == "Space Marines"
    assert army.max_points == 2000
    assert army.total_points == 0
    assert army.remaining_points == 2000
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–º–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_army_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–º–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–º–∏–∏...")
    army = Army("Space Marines", 2000)
    
    # –ü–æ–ª—É—á–∞–µ–º —é–Ω–∏—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    captain = None
    for unit in UNITS_DATABASE["Space Marines"]:
        if unit.name == "Captain":
            captain = unit
            break
    
    assert captain is not None, "Captain –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è HQ —é–Ω–∏—Ç–∞
    can_add, message = army.can_add_unit(captain, 1)
    assert can_add, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Captain: {message}"
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —é–Ω–∏—Ç–∞
    success, message = army.add_unit(captain, 1)
    assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Captain: {message}"
    assert army.total_points == 80
    assert army.remaining_points == 1920
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–º–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_army_rules():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –∞—Ä–º–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞—Ä–º–∏–∏...")
    army = Army("Space Marines", 2000)
    
    # –ü–æ–ª—É—á–∞–µ–º —é–Ω–∏—Ç—ã
    tactical_squad = None
    for unit in UNITS_DATABASE["Space Marines"]:
        if unit.name == "Tactical Squad":
            tactical_squad = unit
            break
    
    assert tactical_squad is not None, "Tactical Squad –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å Troops –±–µ–∑ HQ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    can_add, message = army.can_add_unit(tactical_squad, 5)
    assert not can_add, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Troops –±–µ–∑ HQ"
    assert "HQ —é–Ω–∏—Ç–∞" in message, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {message}"
    print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∞—Ä–º–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    expected_factions = ["Space Marines", "Orks", "Eldar", "Chaos Space Marines"]
    for faction in expected_factions:
        assert faction in UNITS_DATABASE, f"–§—Ä–∞–∫—Ü–∏—è {faction} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤
    total_units = sum(len(units) for units in UNITS_DATABASE.values())
    print(f"üìä –í—Å–µ–≥–æ —é–Ω–∏—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_units}")
    assert total_units > 50, f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —é–Ω–∏—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_units}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —é–Ω–∏—Ç–æ–≤
    for faction, units in UNITS_DATABASE.items():
        for unit in units:
            assert unit.name, f"–£ —é–Ω–∏—Ç–∞ –≤ {faction} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è"
            assert unit.points > 0, f"–£ —é–Ω–∏—Ç–∞ {unit.name} –≤ {faction} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∏–Ω—Ç—ã: {unit.points}"
            assert unit.category in ["HQ", "Troops", "Elites", "Fast Attack", "Heavy Support", "Flyer", "Transport"], f"–£ —é–Ω–∏—Ç–∞ {unit.name} –≤ {faction} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {unit.category}"
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üéñÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Warhammer Army Builder Bot...\n")
    
    try:
        test_unit_creation()
        test_army_creation()
        test_army_validation()
        test_army_rules()
        test_database()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        raise

if __name__ == "__main__":
    main()

